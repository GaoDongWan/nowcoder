/*
如果一个数列S满足对于所有的合法的i,都有S[i + 1] = S[i] + d, 这里的d也可以是负数和零,我们就称数列S为等差数列。
小易现在有一个长度为n的数列x,小易想把x变为一个等差数列。
小易允许在数列上做交换任意两个位置的数值的操作,并且交换操作允许交换多次。
但是有些数列通过交换还是不能变成等差数列,小易需要判别一个数列是否能通过交换操作变成等差数列 

in
输入包括两行,第一行包含整数n(2 ≤ n ≤ 50),即数列的长度。
第二行n个元素x[i](0 ≤ x[i] ≤ 1000),即数列中的每个整数。

out
如果可以变成等差数列输出"Possible",否则输出"Impossible"。
*/
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
public class Main{
	public static void main(String args[]) {
		Scanner sc=new Scanner(System.in);
        while(sc.hasNext()){
        	int n=sc.nextInt();
        	Map<Integer,Integer> map=new TreeMap<Integer,Integer>();
        	for(int i=0;i<n;i++){
        		map.put(sc.nextInt(),1);
        	}
        	if(map.size()==1)
        		System.out.println("Possible");
        	else if(map.size()<n)
        		System.out.println("Impossible");
        	else{
        		int i=0;
        		int flag=0;
        		int re[]=new int[n];
        		for(Integer it:map.keySet()){
        			re[i++]=it;
        		}
        		int min=re[1]-re[0];
        		for(int j=0;j<re.length-1;j++){
        			if(re[j+1]-re[j]!=min){
        				flag=-1;
        				break;
        			}
        		}
        		if(flag==0)
        			System.out.println("Possible");
        		else
            		System.out.println("Impossible");
        	}
        }
	}
}
