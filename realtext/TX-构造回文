/*
给定一个字符串s，你可以从中删除一些字符，使得剩下的串是一个回文串。如何删除才能使得回文串最长呢？
输出需要删除的字符个数。

in
输入数据有多组，每组包含一个字符串s，且保证:1<=s.length<=1000.

out
对于每组数据，输出一个整数，代表最少需要删除的字符个数。
*/
/*
考虑最长公共子序列问题如何分解成子问题，设A=“a0，a1，…，am-1”，B=“b0，b1，…，bm-1”，并Z=“z0，z1，…，zk-1”为它们的最长公共子序列。不难证明有以下性质：

（1） 如果am-1=bn-1，则zk-1=am-1=bn-1，且“z0，z1，…，zk-2”是“a0，a1，…，am-2”和“b0，b1，…，bn-2”的一个最长公共子序列；

（2） 如果am-1!=bn-1，则若zk-1!=am-1，蕴涵“z0，z1，…，zk-1”是“a0，a1，…，am-2”和“b0，b1，…，bn-1”的一个最长公共子序列；

（3） 如果am-1!=bn-1，则若zk-1!=bn-1，蕴涵“z0，z1，…，zk-1”是“a0，a1，…，am-1”和“b0，b1，…，bn-2”的一个最长公共子序列。

这样，在找A和B的公共子序列时，如有am-1=bn-1，则进一步解决一个子问题，找“a0，a1，…，am-2”和“b0，b1，…，bm-2”的一个最长公共子序列；如果am-1!=bn-1，则要解决两个子问题，找出“a0，a1，…，am-2”和“b0，b1，…，bn-1”的一个最长公共子序列和找出“a0，a1，…，am-1”和“b0，b1，…，bn-2”的一个最长公共子序列，再取两者中较长者作为A和B的最长公共子序列。
*/
c[i,j]={
            0                                 i=0||j=0;
            c[i-1,j-1]+1                      x[i]==y[j]&&i,j>0;
            max(c[i,j-1],c[i-1,j])            x[i]!=y[j]&&i,j>0;
}

import java.util.Scanner;

public class Main {
	public static void main(String args[]) {
		Scanner scan = new Scanner(System.in);
		while (scan.hasNext()) {
			String a = scan.nextLine();
			StringBuilder strbuilder = new StringBuilder(a);
			String b = strbuilder.reverse().toString();
			if (a == null || a.equals(""))
				System.out.println("0");
			int[][] c = new int[1001][1001];
			for (int i = 1; i <= a.length(); i++) {
				for (int j = 1; j <= a.length(); j++) {
					if (a.charAt(i - 1) == b.charAt(j - 1)) {
						c[i][j] = c[i - 1][j - 1] + 1;
					} else if (c[i - 1][j] >= c[i][j - 1]) {
						c[i][j] = c[i - 1][j];
					} else {
						c[i][j] = c[i][j - 1];
					}
				}
			}
			System.out.println(a.length() - c[a.length()][a.length()]);
		}
	}
}


若要打印 用一大小与c相等数组记录轨迹 回溯从最后一点递归输出

import java.util.Scanner;

public class LCS {
	public static void main(String args[]) {
		Scanner scan = new Scanner(System.in);
		while (scan.hasNext()) {
			String a = scan.nextLine();
			StringBuilder strbuilder = new StringBuilder(a);
			String b = strbuilder.reverse().toString();
			if (a == null || a.equals(""))
				System.out.println("0");
			int[][] c = new int[1001][1001];
			int[][] d = new int[a.length() + 1][a.length() + 1];
			for (int i = 1; i <= a.length(); i++) {
				for (int j = 1; j <= a.length(); j++) {
					if (a.charAt(i - 1) == b.charAt(j - 1)) {
						c[i][j] = c[i - 1][j - 1] + 1;
						d[i][j]=0;
					} else if (c[i - 1][j] >= c[i][j - 1]) {
						c[i][j] = c[i - 1][j];
						d[i][j]=1;
					} else {
						c[i][j] = c[i][j - 1];
						d[i][j]=-1;
					}
				}
			}
			System.out.println(a.length() - c[a.length()][a.length()]);
			LCS.Print(a, d, a.length(), a.length());

		}
	}
	public static void Print(String c,int[][] d,int ii,int jj){
		if(ii==0||jj==0)
			return;
		if(d[ii][jj]==0){
			Print(c,d,ii-1,jj-1);
			System.out.print(c.charAt(ii-1));
		}else if(d[ii][jj]==1){
			Print(c,d,ii-1,jj);
		}else{
			Print(c,d,ii,jj-1);
		}
	}
}
