/*
小Q今天在上厕所时想到了这个问题：有n个数，两两组成二元组，差最小的有多少对呢？差最大呢？
*/
/*
利用map 先排序
最小对
若map长度比n（原长）小 那就找有多少个value不为1的，累加各自对数
长度为n 从前开始一对对找
最大对
把key给list 取出最小值和最大值的value 相乘
*/
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class IntrestingNum {
	public static void main(String args[]) {
		int minr=0, maxr=0;
		Scanner sc = new Scanner(System.in);
		while (sc.hasNext()) {
			int n = sc.nextInt();
			int[] nums = new int[n];
			for (int i = 0; i < n; i++) {
				nums[i] = sc.nextInt();
			}
			Arrays.sort(nums);
			Map<Integer, Integer> map = new HashMap<Integer, Integer>();
			for (int i = 0; i < n; i++) {
				if (map.containsKey(nums[i])) {
					map.put(nums[i], map.get(nums[i]) + 1);
				} else {
					map.put(nums[i], 1);
				}
			}
			int result = 0;
			if (map.size() == 1) {
				minr = n * (n - 1) / 2;
			} else if (map.size() < n) {
				for (Integer key : map.keySet()) {
					int temp = map.get(key);
					if (temp > 1) {
						result += temp * (temp - 1) / 2;
					}
				}
			} else {
				int min = nums[1] - nums[0];
				for (int i = 1; i < nums.length; i++) {
					if (nums[i] - nums[i - 1] == min) {
						result += 1;
					} else if (nums[i] - nums[i - 1] < min) {
						min = nums[i] - nums[i - 1];
						result = 1;
					}
				}
			}
			minr = result;
			List<Integer> list = new ArrayList<Integer>(map.keySet());
			int a = map.get(list.get(0));
			int b = map.get(list.get(list.size() - 1));
			maxr = a * b;
			System.out.println(minr+"  "+maxr);
		}
	}
}
