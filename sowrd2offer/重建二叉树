/*
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
*/
public class TreeRebuild {
	public TreeNode reConstructBinaryTree(int[] pre, int[] in) {

		return rebuildTree(pre, 0, pre.length - 1, in, 0, in.length - 1);
	}

	public TreeNode rebuildTree(int[] pre, int preS, int preE, int[] in, int inS, int inE) {
		if (preS > preE || inS > inE) {
			return null;
		}
		TreeNode root = new TreeNode(pre[preS]);
		for (int i = inS; i <= inE; i++) {
			if (in[i] == pre[preS]) {
				root.left = rebuildTree(pre, preS + 1, preS + i - inS, in, inS, i - 1);
				root.right = rebuildTree(pre, preS + i - inS + 1, preE, in, i + 1, inE);
			}
		}
		return root;
	}

	public static void main(String argsp[]) {
		int[] pre = new int[] { 1, 2, 4, 7, 3, 5, 6, 8 };
		int[] in = new int[] { 4, 7, 2, 1, 5, 3, 8, 6 };
		TreeRebuild it = new TreeRebuild();
		TreeNode result = it.reConstructBinaryTree(pre, in);
		System.out.println(result);
	}
}
